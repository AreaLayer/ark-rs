/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1GetEventStreamResponse {
    #[serde(rename = "batchStarted", skip_serializing_if = "Option::is_none")]
    pub batch_started: Option<models::V1BatchStartedEvent>,
    #[serde(rename = "batchFinalization", skip_serializing_if = "Option::is_none")]
    pub batch_finalization: Option<models::V1BatchFinalizationEvent>,
    #[serde(rename = "batchFinalized", skip_serializing_if = "Option::is_none")]
    pub batch_finalized: Option<models::V1BatchFinalizedEvent>,
    #[serde(rename = "batchFailed", skip_serializing_if = "Option::is_none")]
    pub batch_failed: Option<models::V1BatchFailedEvent>,
    #[serde(rename = "treeSigningStarted", skip_serializing_if = "Option::is_none")]
    pub tree_signing_started: Option<models::V1TreeSigningStartedEvent>,
    #[serde(
        rename = "treeNoncesAggregated",
        skip_serializing_if = "Option::is_none"
    )]
    pub tree_nonces_aggregated: Option<models::V1TreeNoncesAggregatedEvent>,
    #[serde(rename = "treeTx", skip_serializing_if = "Option::is_none")]
    pub tree_tx: Option<models::V1TreeTxEvent>,
    #[serde(rename = "treeSignature", skip_serializing_if = "Option::is_none")]
    pub tree_signature: Option<models::V1TreeSignatureEvent>,
}

impl V1GetEventStreamResponse {
    pub fn new() -> V1GetEventStreamResponse {
        V1GetEventStreamResponse {
            batch_started: None,
            batch_finalization: None,
            batch_finalized: None,
            batch_failed: None,
            tree_signing_started: None,
            tree_nonces_aggregated: None,
            tree_tx: None,
            tree_signature: None,
        }
    }
}

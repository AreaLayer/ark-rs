/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1TxNotification {
    #[serde(rename = "txid", skip_serializing_if = "Option::is_none")]
    pub txid: Option<String>,
    #[serde(rename = "tx", skip_serializing_if = "Option::is_none")]
    pub tx: Option<String>,
    #[serde(rename = "spentVtxos", skip_serializing_if = "Option::is_none")]
    pub spent_vtxos: Option<Vec<models::V1Vtxo>>,
    #[serde(rename = "spendableVtxos", skip_serializing_if = "Option::is_none")]
    pub spendable_vtxos: Option<Vec<models::V1Vtxo>>,
    /// This field is set only in case of offchain tx.  key: outpoint, value: checkpoint txid
    #[serde(rename = "checkpointTxs", skip_serializing_if = "Option::is_none")]
    pub checkpoint_txs: Option<std::collections::HashMap<String, models::V1TxData>>,
}

impl V1TxNotification {
    pub fn new() -> V1TxNotification {
        V1TxNotification {
            txid: None,
            tx: None,
            spent_vtxos: None,
            spendable_vtxos: None,
            checkpoint_txs: None,
        }
    }
}

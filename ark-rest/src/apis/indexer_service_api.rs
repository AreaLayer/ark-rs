/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
use super::ContentType;
use super::Error;
use crate::apis::ResponseContent;
use crate::models;
use reqwest;
use serde::de::Error as _;
use serde::Deserialize;
use serde::Serialize;

/// struct for typed errors of method [`indexer_service_get_batch_sweep_transactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetBatchSweepTransactionsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_commitment_tx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetCommitmentTxError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_connectors`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetConnectorsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_forfeit_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetForfeitTxsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetSubscriptionError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_virtual_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetVirtualTxsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_vtxo_chain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetVtxoChainError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_vtxo_tree`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetVtxoTreeError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_vtxo_tree_leaves`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetVtxoTreeLeavesError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_get_vtxos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceGetVtxosError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_subscribe_for_scripts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceSubscribeForScriptsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`indexer_service_unsubscribe_for_scripts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexerServiceUnsubscribeForScriptsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

pub async fn indexer_service_get_batch_sweep_transactions(
    configuration: &configuration::Configuration,
    batch_outpoint_period_txid: &str,
    batch_outpoint_period_vout: i64,
) -> Result<
    models::V1GetBatchSweepTransactionsResponse,
    Error<IndexerServiceGetBatchSweepTransactionsError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_batch_outpoint_period_txid = batch_outpoint_period_txid;
    let p_batch_outpoint_period_vout = batch_outpoint_period_vout;

    let uri_str = format!(
        "{}/v1/batch/{batchOutpoint_txid}/{batchOutpoint_vout}/sweepTxs",
        configuration.base_path,
        batchOutpoint_txid = crate::apis::urlencode(p_batch_outpoint_period_txid),
        batchOutpoint_vout = p_batch_outpoint_period_vout
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetBatchSweepTransactionsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetBatchSweepTransactionsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetBatchSweepTransactionsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_commitment_tx(
    configuration: &configuration::Configuration,
    txid: &str,
) -> Result<models::V1GetCommitmentTxResponse, Error<IndexerServiceGetCommitmentTxError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_txid = txid;

    let uri_str = format!(
        "{}/v1/commitmentTx/{txid}",
        configuration.base_path,
        txid = crate::apis::urlencode(p_txid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetCommitmentTxResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetCommitmentTxResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetCommitmentTxError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_connectors(
    configuration: &configuration::Configuration,
    txid: &str,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetConnectorsResponse, Error<IndexerServiceGetConnectorsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_txid = txid;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!(
        "{}/v1/commitmentTx/{txid}/connectors",
        configuration.base_path,
        txid = crate::apis::urlencode(p_txid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetConnectorsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetConnectorsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetConnectorsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_forfeit_txs(
    configuration: &configuration::Configuration,
    txid: &str,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetForfeitTxsResponse, Error<IndexerServiceGetForfeitTxsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_txid = txid;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!(
        "{}/v1/commitmentTx/{txid}/forfeitTxs",
        configuration.base_path,
        txid = crate::apis::urlencode(p_txid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetForfeitTxsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetForfeitTxsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetForfeitTxsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_subscription(
    configuration: &configuration::Configuration,
    subscription_id: &str,
) -> Result<
    models::StreamResultOfV1GetSubscriptionResponse,
    Error<IndexerServiceGetSubscriptionError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_subscription_id = subscription_id;

    let uri_str = format!(
        "{}/v1/script/subscription/{subscriptionId}",
        configuration.base_path,
        subscriptionId = crate::apis::urlencode(p_subscription_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamResultOfV1GetSubscriptionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamResultOfV1GetSubscriptionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetSubscriptionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_virtual_txs(
    configuration: &configuration::Configuration,
    txids: Vec<String>,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetVirtualTxsResponse, Error<IndexerServiceGetVirtualTxsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_txids = txids;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!(
        "{}/v1/virtualTx/{txids}",
        configuration.base_path,
        txids = p_txids.join(",")
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetVirtualTxsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetVirtualTxsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetVirtualTxsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_vtxo_chain(
    configuration: &configuration::Configuration,
    outpoint_period_txid: &str,
    outpoint_period_vout: i64,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetVtxoChainResponse, Error<IndexerServiceGetVtxoChainError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_outpoint_period_txid = outpoint_period_txid;
    let p_outpoint_period_vout = outpoint_period_vout;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!(
        "{}/v1/vtxo/{outpoint_txid}/{outpoint_vout}/chain",
        configuration.base_path,
        outpoint_txid = crate::apis::urlencode(p_outpoint_period_txid),
        outpoint_vout = p_outpoint_period_vout
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetVtxoChainResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetVtxoChainResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetVtxoChainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_vtxo_tree(
    configuration: &configuration::Configuration,
    batch_outpoint_period_txid: &str,
    batch_outpoint_period_vout: i64,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetVtxoTreeResponse, Error<IndexerServiceGetVtxoTreeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_batch_outpoint_period_txid = batch_outpoint_period_txid;
    let p_batch_outpoint_period_vout = batch_outpoint_period_vout;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!(
        "{}/v1/batch/{batchOutpoint_txid}/{batchOutpoint_vout}/tree",
        configuration.base_path,
        batchOutpoint_txid = crate::apis::urlencode(p_batch_outpoint_period_txid),
        batchOutpoint_vout = p_batch_outpoint_period_vout
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetVtxoTreeResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetVtxoTreeResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetVtxoTreeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_vtxo_tree_leaves(
    configuration: &configuration::Configuration,
    batch_outpoint_period_txid: &str,
    batch_outpoint_period_vout: i64,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetVtxoTreeLeavesResponse, Error<IndexerServiceGetVtxoTreeLeavesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_batch_outpoint_period_txid = batch_outpoint_period_txid;
    let p_batch_outpoint_period_vout = batch_outpoint_period_vout;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!(
        "{}/v1/batch/{batchOutpoint_txid}/{batchOutpoint_vout}/tree/leaves",
        configuration.base_path,
        batchOutpoint_txid = crate::apis::urlencode(p_batch_outpoint_period_txid),
        batchOutpoint_vout = p_batch_outpoint_period_vout
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetVtxoTreeLeavesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetVtxoTreeLeavesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetVtxoTreeLeavesError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_get_vtxos(
    configuration: &configuration::Configuration,
    scripts: Option<Vec<String>>,
    outpoints: Option<Vec<String>>,
    spendable_only: Option<bool>,
    spent_only: Option<bool>,
    recoverable_only: Option<bool>,
    page_period_size: Option<i32>,
    page_period_index: Option<i32>,
) -> Result<models::V1GetVtxosResponse, Error<IndexerServiceGetVtxosError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_scripts = scripts;
    let p_outpoints = outpoints;
    let p_spendable_only = spendable_only;
    let p_spent_only = spent_only;
    let p_recoverable_only = recoverable_only;
    let p_page_period_size = page_period_size;
    let p_page_period_index = page_period_index;

    let uri_str = format!("{}/v1/vtxos", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_scripts {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("scripts".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "scripts",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_outpoints {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("outpoints".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "outpoints",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_spendable_only {
        req_builder = req_builder.query(&[("spendableOnly", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_spent_only {
        req_builder = req_builder.query(&[("spentOnly", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_recoverable_only {
        req_builder = req_builder.query(&[("recoverableOnly", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_size {
        req_builder = req_builder.query(&[("page.size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_period_index {
        req_builder = req_builder.query(&[("page.index", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1GetVtxosResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1GetVtxosResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceGetVtxosError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_subscribe_for_scripts(
    configuration: &configuration::Configuration,
    body: models::V1SubscribeForScriptsRequest,
) -> Result<models::V1SubscribeForScriptsResponse, Error<IndexerServiceSubscribeForScriptsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/script/subscribe", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::V1SubscribeForScriptsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::V1SubscribeForScriptsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceSubscribeForScriptsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn indexer_service_unsubscribe_for_scripts(
    configuration: &configuration::Configuration,
    body: models::V1UnsubscribeForScriptsRequest,
) -> Result<serde_json::Value, Error<IndexerServiceUnsubscribeForScriptsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/script/unsubscribe", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexerServiceUnsubscribeForScriptsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

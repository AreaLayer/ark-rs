// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetScheduledSweepRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetScheduledSweepResponse {
    #[prost(message, repeated, tag = "1")]
    pub sweeps: ::prost::alloc::vec::Vec<ScheduledSweep>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SweepableOutput {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub vout: u32,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub scheduled_at: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduledSweep {
    #[prost(string, tag = "1")]
    pub round_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub outputs: ::prost::alloc::vec::Vec<SweepableOutput>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundDetailsRequest {
    #[prost(string, tag = "1")]
    pub round_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundDetailsResponse {
    #[prost(string, tag = "1")]
    pub round_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub txid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub forfeited_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub total_vtxos_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub total_exit_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub fees_amount: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "7")]
    pub inputs_vtxos: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub outputs_vtxos: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub exit_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoundsRequest {
    #[prost(int64, tag = "1")]
    pub after: i64,
    #[prost(int64, tag = "2")]
    pub before: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundsResponse {
    #[prost(string, repeated, tag = "1")]
    pub rounds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetInfoRequest {}
/// here  are the constants
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInfoResponse {
    #[prost(string, tag = "1")]
    pub pubkey: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub round_lifetime: i64,
    #[prost(int64, tag = "3")]
    pub unilateral_exit_delay: i64,
    #[prost(int64, tag = "4")]
    pub round_interval: i64,
    #[prost(string, tag = "5")]
    pub network: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub dust: i64,
    #[prost(string, tag = "7")]
    pub boarding_descriptor_template: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "8")]
    pub vtxo_descriptor_templates: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "9")]
    pub forfeit_address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBoardingAddressRequest {
    #[prost(string, tag = "1")]
    pub pubkey: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBoardingAddressResponse {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub descriptor: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterInputsForNextRoundRequest {
    #[prost(message, repeated, tag = "1")]
    pub inputs: ::prost::alloc::vec::Vec<Input>,
    #[prost(string, optional, tag = "2")]
    pub ephemeral_pubkey: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterInputsForNextRoundResponse {
    /// Mocks wabisabi's blinded credentials.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterOutputsForNextRoundRequest {
    /// Mocks wabisabi's blinded credentials.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// List of receivers for a registered payment.
    #[prost(message, repeated, tag = "2")]
    pub outputs: ::prost::alloc::vec::Vec<Output>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RegisterOutputsForNextRoundResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTreeNoncesRequest {
    #[prost(string, tag = "1")]
    pub round_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub pubkey: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub tree_nonces: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitTreeNoncesResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTreeSignaturesRequest {
    #[prost(string, tag = "1")]
    pub round_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub pubkey: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub tree_signatures: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitTreeSignaturesResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitSignedForfeitTxsRequest {
    /// Forfeit txs signed by the user.
    #[prost(string, repeated, tag = "1")]
    pub signed_forfeit_txs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// If payment has boarding input, the user must sign the associated inputs.
    #[prost(string, optional, tag = "2")]
    pub signed_round_tx: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitSignedForfeitTxsResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEventStreamRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEventStreamResponse {
    #[prost(oneof = "get_event_stream_response::Event", tags = "1, 2, 3, 4, 5")]
    pub event: ::core::option::Option<get_event_stream_response::Event>,
}
/// Nested message and enum types in `GetEventStreamResponse`.
pub mod get_event_stream_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag = "1")]
        RoundFinalization(super::RoundFinalizationEvent),
        #[prost(message, tag = "2")]
        RoundFinalized(super::RoundFinalizedEvent),
        #[prost(message, tag = "3")]
        RoundFailed(super::RoundFailed),
        #[prost(message, tag = "4")]
        RoundSigning(super::RoundSigningEvent),
        #[prost(message, tag = "5")]
        RoundSigningNoncesGenerated(super::RoundSigningNoncesGeneratedEvent),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingRequest {
    #[prost(string, tag = "1")]
    pub payment_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingResponse {
    #[prost(oneof = "ping_response::Event", tags = "1, 2, 3, 4, 5")]
    pub event: ::core::option::Option<ping_response::Event>,
}
/// Nested message and enum types in `PingResponse`.
pub mod ping_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag = "1")]
        RoundFinalization(super::RoundFinalizationEvent),
        #[prost(message, tag = "2")]
        RoundFinalized(super::RoundFinalizedEvent),
        #[prost(message, tag = "3")]
        RoundFailed(super::RoundFailed),
        #[prost(message, tag = "4")]
        RoundSigning(super::RoundSigningEvent),
        #[prost(message, tag = "5")]
        RoundSigningNoncesGenerated(super::RoundSigningNoncesGeneratedEvent),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AsyncPaymentInput {
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<Input>,
    #[prost(string, tag = "2")]
    pub forfeit_leaf_hash: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePaymentRequest {
    #[prost(message, repeated, tag = "1")]
    pub inputs: ::prost::alloc::vec::Vec<AsyncPaymentInput>,
    #[prost(message, repeated, tag = "2")]
    pub outputs: ::prost::alloc::vec::Vec<Output>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePaymentResponse {
    /// signed only by the ASP
    #[prost(string, tag = "1")]
    pub signed_redeem_tx: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompletePaymentRequest {
    #[prost(string, tag = "1")]
    pub signed_redeem_tx: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CompletePaymentResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundRequest {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundResponse {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<Round>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundByIdRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoundByIdResponse {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<Round>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListVtxosRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListVtxosResponse {
    #[prost(message, repeated, tag = "1")]
    pub spendable_vtxos: ::prost::alloc::vec::Vec<Vtxo>,
    #[prost(message, repeated, tag = "2")]
    pub spent_vtxos: ::prost::alloc::vec::Vec<Vtxo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundFinalizationEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub round_tx: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub vtxo_tree: ::core::option::Option<Tree>,
    #[prost(string, repeated, tag = "4")]
    pub connectors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "5")]
    pub min_relay_fee_rate: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundFinalizedEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub round_txid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundFailed {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundSigningEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub cosigners_pubkeys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub unsigned_vtxo_tree: ::core::option::Option<Tree>,
    #[prost(string, tag = "4")]
    pub unsigned_round_tx: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundSigningNoncesGeneratedEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub tree_nonces: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Round {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub start: i64,
    #[prost(int64, tag = "3")]
    pub end: i64,
    #[prost(string, tag = "4")]
    pub round_tx: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub vtxo_tree: ::core::option::Option<Tree>,
    #[prost(string, repeated, tag = "6")]
    pub forfeit_txs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub connectors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "RoundStage", tag = "8")]
    pub stage: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Outpoint {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub vout: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    #[prost(message, optional, tag = "1")]
    pub outpoint: ::core::option::Option<Outpoint>,
    #[prost(string, tag = "2")]
    pub descriptor: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    /// onchain or off-chain
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// Amount to send in satoshis.
    #[prost(uint64, tag = "2")]
    pub amount: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tree {
    #[prost(message, repeated, tag = "1")]
    pub levels: ::prost::alloc::vec::Vec<TreeLevel>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TreeLevel {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<Node>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Node {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub tx: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub parent_txid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vtxo {
    #[prost(message, optional, tag = "1")]
    pub outpoint: ::core::option::Option<Outpoint>,
    #[prost(bool, tag = "2")]
    pub spent: bool,
    #[prost(string, tag = "3")]
    pub round_txid: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub spent_by: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub expire_at: i64,
    #[prost(bool, tag = "6")]
    pub swept: bool,
    #[prost(bool, tag = "7")]
    pub is_oor: bool,
    #[prost(string, tag = "8")]
    pub redeem_tx: ::prost::alloc::string::String,
    #[prost(uint64, tag = "9")]
    pub amount: u64,
    #[prost(string, tag = "10")]
    pub pubkey: ::prost::alloc::string::String,
    #[prost(int64, tag = "11")]
    pub created_at: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTransactionsStreamRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionsStreamResponse {
    #[prost(oneof = "get_transactions_stream_response::Tx", tags = "1, 2")]
    pub tx: ::core::option::Option<get_transactions_stream_response::Tx>,
}
/// Nested message and enum types in `GetTransactionsStreamResponse`.
pub mod get_transactions_stream_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Tx {
        #[prost(message, tag = "1")]
        Round(super::RoundTransaction),
        #[prost(message, tag = "2")]
        Redeem(super::RedeemTransaction),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoundTransaction {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub spent_vtxos: ::prost::alloc::vec::Vec<Outpoint>,
    #[prost(message, repeated, tag = "3")]
    pub spendable_vtxos: ::prost::alloc::vec::Vec<Vtxo>,
    #[prost(message, repeated, tag = "4")]
    pub claimed_boarding_utxos: ::prost::alloc::vec::Vec<Outpoint>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedeemTransaction {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub spent_vtxos: ::prost::alloc::vec::Vec<Outpoint>,
    #[prost(message, repeated, tag = "3")]
    pub spendable_vtxos: ::prost::alloc::vec::Vec<Vtxo>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RoundStage {
    Unspecified = 0,
    Registration = 1,
    Finalization = 2,
    Finalized = 3,
    Failed = 4,
}
impl RoundStage {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ROUND_STAGE_UNSPECIFIED",
            Self::Registration => "ROUND_STAGE_REGISTRATION",
            Self::Finalization => "ROUND_STAGE_FINALIZATION",
            Self::Finalized => "ROUND_STAGE_FINALIZED",
            Self::Failed => "ROUND_STAGE_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROUND_STAGE_UNSPECIFIED" => Some(Self::Unspecified),
            "ROUND_STAGE_REGISTRATION" => Some(Self::Registration),
            "ROUND_STAGE_FINALIZATION" => Some(Self::Finalization),
            "ROUND_STAGE_FINALIZED" => Some(Self::Finalized),
            "ROUND_STAGE_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GenSeedRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenSeedResponse {
    #[prost(string, tag = "1")]
    pub seed: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRequest {
    #[prost(string, tag = "1")]
    pub seed: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestoreRequest {
    #[prost(string, tag = "1")]
    pub seed: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub gap_limit: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestoreResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockRequest {
    #[prost(string, tag = "1")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockRequest {
    #[prost(string, tag = "1")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStatusRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStatusResponse {
    #[prost(bool, tag = "1")]
    pub initialized: bool,
    #[prost(bool, tag = "2")]
    pub unlocked: bool,
    #[prost(bool, tag = "3")]
    pub synced: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeriveAddressRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeriveAddressResponse {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBalanceRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Balance {
    #[prost(string, tag = "1")]
    pub locked: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub available: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBalanceResponse {
    #[prost(message, optional, tag = "1")]
    pub main_account: ::core::option::Option<Balance>,
    #[prost(message, optional, tag = "2")]
    pub connectors_account: ::core::option::Option<Balance>,
}

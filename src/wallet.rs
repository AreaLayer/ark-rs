use crate::boarding_output::BoardingOutput;
use crate::error::Error;
use bitcoin::Address;
use bitcoin::Amount;
use bitcoin::Network;
use bitcoin::XOnlyPublicKey;

pub trait BoardingWallet {
    fn get_boarding_address(
        &self,
        asp_pubkey: XOnlyPublicKey,
        exit_delay: u32,
        descriptor_template: String,
        network: Network,
    ) -> Result<BoardingOutput, Error>;

    fn get_boarding_addresses(
        &self,
        asp_pubkey: XOnlyPublicKey,
        exit_delay: u32,
        descriptor_template: String,
        network: Network,
    ) -> Result<Vec<BoardingOutput>, Error>;
}

#[derive(Debug, Clone, Copy)]
pub struct Balance {
    /// All coinbase outputs not yet matured
    pub immature: Amount,
    /// Unconfirmed UTXOs generated by a wallet tx
    pub trusted_pending: Amount,
    /// Unconfirmed UTXOs received from an external wallet
    pub untrusted_pending: Amount,
    /// Confirmed and immediately spendable balance
    pub confirmed: Amount,
}

pub trait OnchainWallet {
    fn get_onchain_address(&mut self) -> Result<Address, Error>;

    fn sync(&mut self) -> impl std::future::Future<Output = Result<(), Error>> + Send;

    fn balance(&self) -> Result<Balance, Error>;
}
